version "4.5"

class DefilerHandler : EventHandler
{
	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'Lumberjack':
				if (random[defrand]() <= 48)
				{
					e.Replacement = "HDDefiler";
				}
				break;
		}
	}
}

class HDDefiler : HDWeaponGrabber
{
	enum DefilerProperties
	{
		DFProp_Flags, 
		DFProp_Blood,
		DFProp_Hunger
	}

	override void Tick()
	{
		if (IsFrozen())
		{
			return;
		}

		if (!owner)
		{
			Bloodied = false;
		}

		Super.Tick();
		if (GetAge() % 35 == 0)
		{
			WeaponStatus[DFProp_Hunger] = min(500, WeaponStatus[DFProp_Hunger] + 1);
			bUNDROPPABLE = WeaponStatus[DFProp_Hunger] > 300;
			let plr = HDPlayerPawn(owner);
			if (plr && WeaponStatus[DFProp_Hunger] > 300)
			{
				if (--ChantTicker <= 0)
				{
					plr.A_StartSound("Defiler/Chant", 20, CHANF_LOCAL, 0.5, pitch: frandom(0.75, 1.3));
					ChantTicker = 120;
				}
				plr.bloodloss += (WeaponStatus[DFProp_Hunger] - 300) / 20 * (plr.regenblues > 0 ? 4 : 1);
			}
		}
	}

	override bool AddSpareWeapon(actor newowner) { return AddSpareWeaponRegular(newowner); }
	override HDWeapon GetSpareWeapon(actor newowner, bool reverse, bool doselect) { return GetSpareWeaponRegular(newowner, reverse, doselect); }
	override double GunMass() { return 1; }
	override double WeaponBulk() { return 10; }
	override string, double GetPickupSprite() { return "DFLRZ0", 0.50; }
	override string GetHelpText()
	{
		return WEPHELP_FIRE.."  Stab\n"
		..WEPHELP_ALTFIRE.."  Lunge\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_ALTFIRE.."  Stab yourself";
	}

	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		sb.DrawRect(-16, -16, -6, 3);
		sb.DrawRect(-22, -18, -1, 7);
		sb.DrawRect(-23, -17, -13, 5);
		sb.DrawRect(-36, -16, -2, 3);
		sb.DrawRect(-38, -15, -2, 1);
		sb.DrawWepNum(hdw.WeaponStatus[DFProp_Blood], MinCharge);
	}

	action void A_Lunge()
	{
		HDPlayerPawn hdp = hdplayerpawn(self);
		if (hdp)
		{
			if (hdp.fatigue >= 30 || pos.z > floorz && !checkmove(pos.xy - AngleToVector(angle, 8), PCM_DROPOFF | PCM_NOACTORS))
			{
				SetWeaponState('hold');
				return;
			}
			else
			{
				hdp.fatigue+=3;
			}
		}
		double overloaded = hdp.CheckEncumbrance();
		A_Recoil(min(overloaded * 0.6, 4.0) - 4.0);
		hdp.overloaded = overloaded;
	}

	action void A_Stab(double dmg)
	{
		FLineTraceData data;
		bool hasPunched = LineTrace(angle, 48, pitch, TRF_NOSKY, offsetz: height - 12, data: data);
		if (!hasPunched)
		{
			return;
		}

		LineAttack(angle, 48, pitch, data.HitLine ? (CheckInventory('PowerStrength', 1) ? random(50, 120) : random(5, 15)) : 0, "None", CheckInventory('PowerStrength', 1) ? 'DefilerPuffBig' : 'DefilerPuffSmall', flags: LAF_NORANDOMPUFFZ | LAF_OVERRIDEZ, offsetz: height - 12);

		if (!data.HitActor)
		{
			return;
		}

		Actor pActor = data.HitActor;
		dmg += HDMath.TowardsEachOther(self, pActor) * 2;

		let plr = HDPlayerPawn(self);
		if (plr)
		{
			int iy = max(abs(player.cmd.pitch), abs(player.cmd.yaw)) * 10;
			dmg += min(iy, dmg * 2);
			if (floorz < pos.z)
			{
				dmg *= 0.5;
			}
		}

		dmg *= frandom(0.7, 1.2);

		if (plr && !pActor.bDONTTHRUST && (pActor.mass < 200 || pActor.radius * 2 < pActor.Height && data.HitLocation.z > pActor.pos.z + pActor.Height * 0.6))
		{
			double iyaw = player.cmd.yaw * (65535.0 / 360.0);
			if (abs(iyaw) > 0.5)
			{
				pActor.A_SetAngle(clamp(Normalize180(pActor.angle - iyaw * 100), -50, 50), SPF_INTERPOLATE);
			}
			double ipitch = player.cmd.pitch * (65535.0 / 360.0);
			if (abs(ipitch) > 0.5 * 65535.0 / 360.0)
			{
				pActor.A_SetPitch(clamp((pActor.angle + ipitch * 100) % 90, -30, 30), SPF_INTERPOLATE);
			}
		}

		if (!pActor.bNOPAIN && pActor.Health > 0 && !(pActor is "HDBarrel") && data.HitLocation.z > pActor.pos.z + pActor.height * 0.75)
		{
			if (hd_debug)
			{
				A_Log("HEAD SHOT");
			}
			HDMobBase.ForcePain(pActor);
			dmg *= frandom(1.75, 2.0);
		}

		if (hd_debug)
		{
			A_Log(string.format("Stabbed %s for %i damage!", pActor.GetClassName(), dmg));
		}
		if (dmg * 2 > pActor.Health)
		{
			pActor.A_StartSound("Defiler/Stabbity", CHAN_AUTO);
		}

		if (pActor is 'HDHumanoid')
		{
			invoker.WeaponStatus[DFProp_Blood] = int(min(invoker.WeaponStatus[DFProp_Blood] + dmg / 30, MinCharge * 2));
			invoker.WeaponStatus[DFProp_Hunger] = max(-300, invoker.WeaponStatus[DFProp_Hunger] - random(25, 40));
			invoker.Bloodied = true;
			A_CheckKnifeFrame();
		}

		pActor.DamageMobj(invoker, self, int(dmg), 'Melee');
	}

	private action void A_CheckKnifeFrame()
	{
		let psp = player.GetPSprite(PSP_WEAPON);
		psp.frame = int(invoker.Bloodied);
	}

	const MinCharge = 50;
	private bool HasAttacked;
	private bool Bloodied;
	private int ChantTicker;

	Default
	{
		+WEAPON.MELEEWEAPON
		+WEAPON.NOALERT
		+WEAPON.NO_AUTO_SWITCH
		+FORCEPAIN
		+HDWEAPON.DONTDISARM
		+HDWEAPON.DONTNULL
		Obituary "%o got %p blood drained by %k.";
		Inventory.PickupMessage "Picked up the the demon knife.";
		Weapon.SelectionOrder 100;
		Weapon.Kickback 50;
		Weapon.BobStyle "Alpha";
		Weapon.BobSpeed 2.6;
		Weapon.BobRangeX 0.1;
		Weapon.BobRangeY 0.5;
		Weapon.SlotNumber 1;
		Weapon.SlotPriority 2;
		Scale 0.3;
		Tag "Defiler";
		HDWeapon.Refid "dfl";
	}

	States
	{
		Spawn:
			DFLR Z -1;
			Stop;
		Ready:
			DFLR A 1
			{
				A_CheckKnifeFrame();
				if (!PressingFire() && !PressingAltfire())
				{
					invoker.HasAttacked = false;
				}

				int flgs = WRF_ALL;
				if (invoker.HasAttacked)
				{
					flgs |= WRF_NOFIRE;
				}
				A_WeaponReady(flgs);

				let psp = player.GetPSprite(PSP_WEAPON);
				if (psp.rotation < 15 * 2)
				{
					A_OverlayPivotAlign(PSP_WEAPON, PSPA_CENTER, PSPA_CENTER);
					A_OverlayRotate(PSP_WEAPON, 15, WOF_ADD);
				}

				let plr = HDPlayerPawn(self);
				if (plr.zerk > 0 && !invoker.bUNTOSSABLE)
				{
					invoker.bUNTOSSABLE = true;
					plr.A_StartSound("misc/bulletflesh", CHAN_AUTO);
					A_MuzzleClimb(frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(0.0, 1.0));
				}
				else if (plr.zerk <= 0 && invoker.bUNTOSSABLE)
				{
					invoker.bUNTOSSABLE = false;
					plr.A_StartSound("misc/bulletflesh", CHAN_AUTO);
					A_MuzzleClimb(frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(0.0, 1.0));
					plr.woundcount += 3;
				}
			}
			Goto ReadyEnd;
		Select0:
			DFLR A 0 A_CheckKnifeFrame();
			DFLR # 0 A_JumpIf(invoker.bUNTOSSABLE, 'Ready');
			DFLR # 1 A_Raise(16);
			Wait;
		Deselect0:
			DFLR A 0 A_CheckKnifeFrame();
			DFLR # 0 A_JumpIf(invoker.bUNTOSSABLE, 'Ready');
			DFLR # 1 A_Lower(16);
			Wait;
		Fire:
		Hold:
		AltHold:
			#### # 0 A_JumpIf(PressingZoom(), 'Sudoku');
			#### # 0 A_JumpIfInventory("PowerStrength", 1, "ZerkStab");
			#### # 0 A_WeaponBusy(true);
			#### # 1
			{
				invoker.HasAttacked = true;
				A_OverlayRotate(PSP_WEAPON, 0);
				A_WeaponOffset(60, 0, WOF_KEEPY);
				A_Stab(40);
			}
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, -20);
				A_WeaponOffset(140, 0, WOF_KEEPY);
			}
			#### # 8;
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, -10);
				A_WeaponOffset(60, 0, WOF_KEEPY);
			}
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, -5);
				A_WeaponOffset(30, 0, WOF_KEEPY);
			}
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, 0);
				A_WeaponOffset(0, 0, WOF_KEEPY);
			}
			#### # 0 A_WeaponBusy(false);
			#### # 0 A_JumpIf(PressingAltFire(), "AltFire");
			Goto Ready;
		ZerkStab:
			#### D 0 A_Recoil(-1);
			#### D 0 A_Stab(150);
			#### D 3;
			#### CB 1;
			#### # 5 A_CheckKnifeFrame();
			#### # 0 A_JumpIf(PressingAltFire(), "AltFire");
			Goto Ready;
		AltFire:
			#### # 0 A_JumpIf(PressingZoom(), 'Sudoku');
			#### # 1 Offset(0, 36);
			#### # 1 Offset(0, 50);
			#### # 2 A_CheckFloor("Lunge");
			Goto Kick;
		Sudoku:
			#### # 1;
			#### # 0
			{
				if (pitch < 55)
				{
					A_SetPitch(pitch + 8, SPF_INTERPOLATE);
					A_Refire('AltFire');
					return;
				}
				else
				{
					SetWeaponState('Ouchie');
					return;
				}
			}
			Goto Nope;
		Ouchie:
			#### # 0 A_WeaponBusy(true);
			#### ### 1
			{
				A_WeaponOffset(0, 20, WOF_ADD);
				A_OverlayRotate(PSP_WEAPON, -30, WOF_ADD);
			}
			TNT1 A 5;
			#### # 0
			{
				invoker.Bloodied = true;
				A_CheckKnifeFrame();
				let plr = HDPlayerPawn(self);
				plr.A_SetBlend("7a 3a 18", 0.2, 4);
				plr.A_SetPitch(plr.pitch + 10, SPF_INTERPOLATE);
				plr.A_StartSound("Defiler/Stabbity", CHAN_WEAPON);
				plr.A_StartSound("Defiler/Stabbity", CHAN_WEAPON, CHANF_OVERLAP);
				plr.A_StartSound(plr.medsound, CHAN_VOICE);
				if (invoker.WeaponStatus[DFProp_Blood] >= MinCharge)
				{
					plr.A_GiveInventory("DefilerHealing");
					plr.GiveBody(min(invoker.WeaponStatus[DFProp_Blood] / 2, MinCharge));
					invoker.WeaponStatus[DFProp_Blood] -= MinCharge;
				}

				int toFeed = random(120, 160);
				invoker.WeaponStatus[DFProp_Hunger] = max(-300, invoker.WeaponStatus[DFProp_Hunger] - toFeed);
				plr.bloodloss += toFeed * (plr.regenblues > 20 ? 3 : 1);

				int toInflict = random(5, random(5, 10 + (!random(0, 2) ? 10 : 0)));
				if (plr.regenblues > 20)
				{
					toInflict *= 3;
				}
				plr.woundcount += toInflict;
			}
			TNT1 A 15;
			DFLR # 0
			{
				A_CheckKnifeFrame();
				A_OverlayRotate(PSP_WEAPON, 0);
			}
			#### ### 1
			{
				A_WeaponOffset(0, -20, WOF_ADD);
			}
			#### # 0 A_WeaponBusy(false);
			Goto Nope;

		Lunge:
			#### # 0 A_Lunge();
			#### #### 1
			{
				if (CheckInventory('PowerStrength', 1))
				{
					A_Recoil(-random(6, 12));
				}
			}
			#### # 1 A_Recoil(-4);
		Kick:
			#### # 13
			{
				if (HDPlayerPawn(self))
				{
					HDPlayerPawn(self).fatigue += 2;
				}
				FLineTraceData data;
				LineTrace(angle, radius * 1.6, 0, Offsetz: 10, data: data);
				if (data.HitActor)
				{
					HDFist.Kick(self, data.HitActor, invoker);
				}
				if (CheckInventory('PowerStrength', 1))
				{
					A_SetTics(8);
				}
			}
			#### # 0 A_Refire();
			Goto Ready;
	}
}

class DefilerHealing : Powerup
{
	override void DoEffect()
	{
		Super.DoEffect();
		let plr = HDPlayerPawn(owner);
		if (!plr)
		{
			return;
		}

		plr.beatmax = min(plr.beatmax, 10);
		plr.bloodpressure = max(plr.bloodpressure, 80);
		if (plr && plr.beatcount == 0)
		{
			plr.GiveBody(5, plr.MaxHealth());
		}
	}

	Default
	{
		+INVENTORY.ALWAYSPICKUP
		Powerup.Duration -20;
	}
}

class DefilerPuffBase : Actor
{
	Default
	{
		+NOINTERACTION
		+ALLOWTHRUFLAGS
		+MTHRUSPECIES
		+PUFFGETSOWNER
		+NOEXTREMEDEATH
		DamageType "Melee";
		AttackSound "Defiler/WallImpact";
	}
}

class DefilerPuffSmall : DefilerPuffBase
{
	Default
	{
		Decal "DefilerSlashSmall";
	}
}

class DefilerPuffBig : DefilerPuffBase
{
	Default
	{
		Decal "DefilerSlashBig";
	}
}