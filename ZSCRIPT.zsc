version "4.5"

class ExecutionerHandler : EventHandler
{
	override void CheckReplacement(ReplaceEvent e)
	{
		if (!e.Replacement)
		{
			return;
		}

		switch (e.Replacement.GetClassName())
		{
			case 'Lumberjack':
				if (random[execrand]() <= 64)
				{
					e.Replacement = "HDExecutioner";
				}
				break;
		}
	}
}

class HDExecutioner : HDWeapon
{
	enum ExecutionerProperties
	{
		EXProp_Flags, 
		EXProp_Blood,
		EXProp_Level
	}

	override void Tick()
	{
		if (IsFrozen())
		{
			return;
		}

		Super.Tick();

		if (!owner)
		{
			Bloodied = false;
			GraceTicker = 0;
		}
	}

	override void DoEffect()
	{
		Super.DoEffect();

		if (GetAge() % 35 == 0)
		{
			WeaponStatus[EXProp_Blood] = max(-800, WeaponStatus[EXProp_Blood] - 1);
			if (WeaponStatus[EXProp_Blood] > 0)
			{
				bUNDROPPABLE = false;
			}
			
			let plr = HDPlayerPawn(owner);
			if (plr && WeaponStatus[EXProp_Blood] <= 0)
			{
				GraceTicker++;
				if (GraceTicker >= 5)
				{
					bUNDROPPABLE = true;
					Bloodied = false;
					if (--ChantTicker <= 0)
					{
						plr.A_SetBlend("7a 3a 18", 0.2, 4);
						plr.A_MuzzleClimb((0, frandom(1.0, 1.5)), (0, 0), (0, 0), (0, 0));
						plr.A_StartSound(plr.medsound, CHAN_VOICE);
						plr.A_StartSound("Executioner/Chant", 20, CHANF_LOCAL, 0.85, pitch: frandom(1.0, 1.05));
						ChantTicker = 120;
					}
					else
					{
						plr.bloodloss += int(ceil(abs(WeaponStatus[EXProp_Blood]) / 100.0) * (plr.CountInv('HDBlues') > 0 ? 4 : 1));
					}
				}
			}
		}

		if (HighlightedActor && (!A_IsValidTarget(HighlightedActor) || ++HighlightTicker >= 18))
		{
			HighlightedActor = null;
			HighlightTicker = 0;
		}

		if (HighlightedActor)
		{
			for (int i = 0; i < 2; ++i)
			{
				HighlightedActor.A_SpawnParticle("DarkRed", SPF_RELATIVE | SPF_FULLBRIGHT, random(20, 35), random(4, 12), random(0, 360), frandom(0, HighlightedActor.radius), 0, HighlightedActor.height + 5 + random(8, -8), 0, 0, frandom(-1.0, -3.0), 0, 0, -0.3);
			}
		}
	}

	override void ActualPickup(Actor other, bool silent)
	{
		let knife = HDExecutioner(other.FindInventory('HDExecutioner'));
		if (knife)
		{
			static const string str[] =
			{
				"Your blood is all mine.",
				"I am not sharing you.",
				"I've grown more powerful.",
				"My power has increased.",
				"There can be only one.",
				"Competition is not healthy."
			};
			static const string fullStr[] =
			{
				"I'm already at my maximum power.",
				"Pathetic.",
				"My powers cannot go beyond this.",
				"This is the strongest I've ever felt.",
				"This power is no match for mine.",
				"I didn't even feel anything.",
				"Useless."
			};
			
			if (knife.WeaponStatus[EXProp_Level] < 4)
			{
				other.A_Log(str[random[execrand](0, str.Size() - 1)], true);
			}
			else
			{
				other.A_Log(fullStr[random[execrand](0, fullStr.Size() - 1)], true);
			}
			knife.WeaponStatus[EXProp_Level] = min(4, knife.WeaponStatus[EXProp_Level] + WeaponStatus[EXProp_Level] + 1);
			Destroy();
			return;
		}
		Super.ActualPickup(other, silent);
	}

	override void DetachFromOwner()
	{
		A_TakeBonuses();
		Super.DetachFromOwner();
	}

	override bool AddSpareWeapon(actor newowner) { return AddSpareWeaponRegular(newowner); }
	override HDWeapon GetSpareWeapon(actor newowner, bool reverse, bool doselect) { return GetSpareWeaponRegular(newowner, reverse, doselect); }
	override double GunMass() { return 1; }
	override double WeaponBulk() { return 10; }
	override string, double GetPickupSprite() { return "EXECZ0", 0.50; }
	override string GetHelpText()
	{
		return WEPHELP_FIRE.."  Stab (hold "..WEPHELP_FIREMODE.." to feed)\n"
		..WEPHELP_ALTFIRE.."  Assassinate\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_FIRE.."  (hold) Stab yourself to feed";
	}
	override void DrawHUDStuff(HDStatusBar sb, HDWeapon hdw, HDPlayerPawn hpl)
	{
		sb.DrawRect(-16, -16, -6, 3);
		sb.DrawRect(-22, -18, -1, 7);
		sb.DrawRect(-23, -17, -13, 5);
		sb.DrawRect(-36, -16, -2, 3);
		sb.DrawRect(-38, -15, -2, 1);
		sb.DrawWepNum(max(0, hdw.WeaponStatus[EXProp_Blood]), MaxBlood, alwaysprecise: true);
	}

	action int A_Stab(double dmg)
	{
		FLineTraceData data;
		bool hasStabbed = LineTrace(angle, 56, pitch, TRF_NOSKY, offsetz: height - 12, data: data);
		if (!hasStabbed)
		{
			return 0;
		}

		LineAttack(angle, 56, pitch, 0, "None", dmg > 100 ? 'ExecutionerPuffBig' : 'ExecutionerPuffSmall', flags: LAF_NORANDOMPUFFZ | LAF_OVERRIDEZ, offsetz: height - 12);

		if (!data.HitActor)
		{
			return int(data.HitLine != null || data.HitSector != null);
		}

		Actor pActor = data.HitActor;
		dmg += HDMath.TowardsEachOther(self, pActor) * 2;

		int hswing = player.cmd.yaw >> 5;
		int vswing = player.cmd.pitch >> 5;
		if (hswing <= 0)
		{
			dmg += min(max(abs(hswing), abs(vswing)), dmg * 2);
		}

		if (pos.z > floorz)
		{
			dmg *= 0.5;
		}

		dmg *= frandom(0.9, 1.2);

		let plr = HDPlayerPawn(self);
		if (plr && !pActor.bDONTTHRUST && (pActor.mass < 200 || pActor.radius * 2 < pActor.Height && data.HitLocation.z > pActor.pos.z + pActor.Height * 0.6))
		{
			double iyaw = player.cmd.yaw * (65535.0 / 360.0);
			if (abs(iyaw) > 0.5)
			{
				pActor.A_SetAngle(clamp(Normalize180(pActor.angle - iyaw * 100), -50, 50), SPF_INTERPOLATE);
			}
			double ipitch = player.cmd.pitch * (65535.0 / 360.0);
			if (abs(ipitch) > 0.5 * 65535.0 / 360.0)
			{
				pActor.A_SetPitch(clamp((pActor.angle + ipitch * 100) % 90, -30, 30), SPF_INTERPOLATE);
			}
		}

		if (!pActor.bNOPAIN && pActor.Health > 0 && !(pActor is "HDBarrel") && data.HitLocation.z > pActor.pos.z + pActor.height * 0.75)
		{
			HDMobBase.ForcePain(pActor);
			dmg *= frandom(1.75, 2.0);
		}

		if (invoker.Assassination)
		{
			dmg = pActor.Health;
		}

		if (dmg * 2 > pActor.Health)
		{
			pActor.A_StartSound("Executioner/Stabbity", CHAN_AUTO);
		}

		int ret = 1;
		bool isDraining = false;
		if (pActor is 'HDHumanoid' && pActor.Health > 0)
		{
			if (PressingFiremode() && PressingFire() && !invoker.Assassination)
			{
				dmg = random(5, 8) * (invoker.WeaponStatus[EXProp_Level] + 1);
				invoker.WeaponStatus[EXProp_Blood] = min(MaxBlood, invoker.WeaponStatus[EXProp_Blood] + int(dmg * (pActor.bFRIENDLY ? 10 : 5)));
				HDHumanoid(pActor).stunned += int(dmg * 3);
				A_Face(pActor, 0, 0);
				A_ChangeVelocity(0.5, flags: CVF_RELATIVE);
				A_StartSound("Executioner/Schlorp", CHAN_WEAPON, CHANF_OVERLAP, pitch: frandom(0.9, 1.2));
				ret = 2;
				isDraining = true;
			}
			invoker.WeaponStatus[EXProp_Blood] = min(MaxBlood, invoker.WeaponStatus[EXProp_Blood] + random(10, 20));
			invoker.Bloodied = true;
			A_CheckKnifeFrame();
		}

		pActor.DamageMobj(invoker, self, int(dmg), 'Melee', DMG_FORCED | DMG_THRUSTLESS);
		if (isDraining && pActor.Health <= 0)
		{
			ret = 3;
		}
		return ret;
	}

	private action void A_HighlightTarget()
	{
		FLineTraceData data;
		LineTrace(angle, HDCONST_ONEMETRE * 100, pitch, TRF_NOSKY | TRF_THRUHITSCAN | TRF_THRUBLOCK, height - HDCONST_CROWNTOEYES, data: data);
		if (A_IsValidTarget(data.HitActor))
		{
			invoker.HighlightedActor = data.HitActor;
			invoker.HighlightTicker = 0;
		}
	}

	private action void A_Assassinate()
	{
		if (!invoker.HighlightedActor)
		{
			return;
		}

		vector3 oldPos = pos;
		if (Warp(invoker.HighlightedActor, -(invoker.HighlightedActor.radius + radius + 4), 0, 0, 0, WARPF_INTERPOLATE))
		{
			vector3 newPos = pos;

			SetXYZ(oldPos);
			A_Face(invoker.HighlightedActor, 0, 0, flags: FAF_MIDDLE);

			for (int i = 0; i < 200; ++i)
			{
				A_SpawnParticle(0xFF0000, SPF_RELATIVE | SPF_FULLBRIGHT, random(40, 105), frandom(2.0, 5.0), random(0, 359),
					Radius, 0, frandom(0, Height),
					1.0, 1.0, 0,
					frandom(-0.08, -0.06), frandom(-0.01, -0.005), 0);
			}

			// [Ace] And now we do a little hacking. I can't into vector math.
			A_RailAttack(0, 0, 0, "", "", RGF_SILENT | RGF_NOPIERCING | RGF_CENTERZ, 2.0, null, sparsity: 2.0, spawnclass: 'ExecutionerTrailParticleSpawner');

			SetXYZ(newPos);
			A_Face(invoker.HighlightedActor, 0, 0, flags: FAF_MIDDLE);

			let plr = HDPlayerPawn(self);

			int cost = invoker.HighlightedActor.Health;
			if (invoker.HighlightedActor is 'Necromancer' || CountInv('HDZerk') > HDZerk.HDZERK_COOLOFF)
			{
				cost /= 4;
			}
			invoker.WeaponStatus[EXProp_Blood] -= cost;
			if (invoker.WeaponStatus[EXProp_Blood] < 0)
			{
				plr.bloodloss += abs(invoker.WeaponStatus[EXProp_Blood]) * (plr.CountInv('HDBlues') > 30 ? 4 : 1);
				invoker.WeaponStatus[EXProp_Blood] = 0;
			}

			A_StartSound("Executioner/Assassinate", 7);
			A_StartSound("Executioner/Assassinate", 7, CHANF_OVERLAP);
			invoker.Assassination = true;
			SetWeaponState('Fire');
		}
	}

	private action void A_CheckKnifeFrame()
	{
		let psp = player.GetPSprite(PSP_WEAPON);
		psp.frame = int(invoker.Bloodied);
	}

	private action bool A_IsValidTarget(Actor a)
	{
		let plr = HDPlayerPawn(invoker.owner);
		if (!a || !a.bISMONSTER || a.bBOSS || !a.bSHOOTABLE || a.bINVULNERABLE || a.bFRIENDLY || a.Health <= 0 || a.bCORPSE || !plr || plr.bloodloss > 2000 || !plr.CheckSight(a, SF_SEEPASTSHOOTABLELINES | SF_IGNOREVISIBILITY))
		{
			return false;
		}

		double warpDist = a.radius + radius + 4;
		double useDist = HDCONST_ONEMETRE * (10 + 5 * invoker.WeaponStatus[EXProp_Level]) * (a is 'ShellShade' ? 5 : 1);
		return level.IsPointInLevel(a.Vec3Angle(-warpDist, 0)) && !a.InStateSequence(a.CurState, a.FindState('falldown')) && plr.Distance3D(a) <= useDist && plr.CheckPosition(a.Vec2Angle(-warpDist, 0));
	}

	private action void A_RotateToNormal()
	{
		let psp = player.GetPSprite(PSP_WEAPON);
		if (psp.rotation < 30)
		{
			A_OverlayPivotAlign(PSP_WEAPON, PSPA_CENTER, PSPA_CENTER);
			A_OverlayRotate(PSP_WEAPON, 15, WOF_ADD);
		}
	}

	private action void A_GiveBonuses()
	{
		if (!invoker.SpeedBonus)
		{
			A_GiveInventory('ExecutionerPassiveSpeed');
			invoker.SpeedBonus = ExecutionerPassiveSpeed(FindInventory('ExecutionerPassiveSpeed'));
		}
		if (!invoker.InvisBonus)
		{
			A_GiveInventory('ExecutionerPassiveInvisibility');
			invoker.InvisBonus = ExecutionerPassiveInvisibility(FindInventory('ExecutionerPassiveInvisibility'));
		}
		invoker.SpeedBonus.Level = invoker.WeaponStatus[EXProp_Level];
	}

	private action void A_TakeBonuses()
	{
		if (invoker.SpeedBonus)
		{
			invoker.owner.A_TakeInventory('ExecutionerPassiveSpeed');
		}
		if (invoker.InvisBonus)
		{
			invoker.owner.A_TakeInventory('ExecutionerPassiveInvisibility');
		}
	}

	const MaxBlood = 3000;
	private bool HasAttacked;
	private bool Bloodied;
	private int ChantTicker;
	private bool Assassination;
	private int TotalSchlorped;
	private Actor HighlightedActor;
	private int HighlightTicker;
	private int GraceTicker;

	private ExecutionerPassiveSpeed SpeedBonus;
	private ExecutionerPassiveInvisibility InvisBonus;

	Default
	{
		+WEAPON.MELEEWEAPON
		+WEAPON.NOALERT
		+WEAPON.NO_AUTO_SWITCH
		+FORCEPAIN
		+HDWEAPON.DONTDISARM
		+AMBUSH
		Obituary "%o got %p blood drained by %k.";
		Inventory.PickupMessage "Picked up the demon knife. It looks... hungry.";
		Inventory.PickupSound "weapons/pocket";
		Weapon.SelectionOrder 100;
		Weapon.Kickback 50;
		Weapon.BobStyle "Alpha";
		Weapon.BobSpeed 2.6;
		Weapon.BobRangeX 0.1;
		Weapon.BobRangeY 0.5;
		Weapon.SlotNumber 1;
		Weapon.SlotPriority 2;
		Scale 0.3;
		Tag "Executioner";
		HDWeapon.Refid "exe";
	}

	States
	{
		Spawn:
			EXEC Z -1;
			Stop;
		Ready:
			EXEC A 1
			{
				invoker.TotalSchlorped = 0;

				A_CheckKnifeFrame();
				if (!PressingFire() && !PressingAltfire())
				{
					invoker.HasAttacked = false;
				}
				let plr = HDPlayerPawn(self);

				int flgs = WRF_ALL & ~WRF_ALLOWUSER2;
				if (invoker.HasAttacked)
				{
					flgs |= WRF_NOFIRE;
				}
				A_WeaponReady(flgs);
				A_HighlightTarget();

				let psp = player.GetPSprite(PSP_WEAPON);
				A_RotateToNormal();

				int zerk = CountInv('HDZerk') > HDZerk.HDZERK_COOLOFF;
				if (zerk > 0 && !invoker.bUNTOSSABLE)
				{
					invoker.bUNTOSSABLE = true;
					invoker.bDONTNULL = true;
					A_StartSound("misc/bulletflesh", CHAN_AUTO);
					A_MuzzleClimb(frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(0.0, 1.0));
				}
				else if (zerk <= 0 && invoker.bUNTOSSABLE)
				{
					invoker.bUNTOSSABLE = false;
					invoker.bDONTNULL = false;
					A_StartSound("misc/bulletflesh", CHAN_AUTO);
					A_MuzzleClimb(frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(-1.0, 1.0), frandom(0.0, 1.0));
					plr.woundcount += 3;
				}

				if (invoker.WeaponStatus[EXProp_Blood] > 0)
				{
					A_GiveBonuses();
				}
				else
				{
					A_TakeBonuses();
				}
			}
			Goto ReadyEnd;
		Select0:
			EXEC A 0
			{
				A_CheckKnifeFrame();
				A_GiveBonuses();
				A_StartSound("Executioner/Unsheathe", 6);
			}
			EXEC # 1 A_Raise(16);
			Wait;
		Deselect0:
			EXEC A 0
			{
				A_TakeBonuses();
				invoker.bUNTOSSABLE = false;
				A_CheckKnifeFrame();
			}
			EXEC # 1 A_Lower(16);
			Wait;
		Fire:
			#### # 0 A_JumpIf(PressingZoom(), 'Sudoku');
			#### # 1
			{
				A_WeaponBusy(true);
				A_StartSound("Executioner/Swing", CHAN_WEAPON);
				invoker.HasAttacked = true;
				A_OverlayRotate(PSP_WEAPON, 0);
				A_WeaponOffset(60, 0, WOF_KEEPY);
			}
			Goto Hold + 1;
		Hold:
			#### # 5;
			#### # 0
			{
				int dmg = 40 + 10 * invoker.WeaponStatus[EXProp_Level];
				if (HDPlayerPawn(self).strength > 1.0)
				{
					dmg = int(dmg * (1.6 ** HDPlayerPawn(self).strength));
				}

				switch (A_Stab(dmg))
				{
					case 1:
					{
						SetWeaponState('Stab');
						break;
					}
					case 2:
					{
						A_WeaponOffset(40, 0, WOF_KEEPY);
						A_OverlayRotate(PSP_WEAPON, -10);
						SetWeaponState('Hold');
						break;
					}
					case 3:
					{
						SetWeaponState('LetGo');
						break;
					}
				}

				invoker.Assassination = false;
			}
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, -20);
				A_WeaponOffset(120, 0, WOF_KEEPY);
			}
			#### # 2;
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, -10);
				A_WeaponOffset(50, 0, WOF_KEEPY);
			}
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, -5);
				A_WeaponOffset(20, 0, WOF_KEEPY);
			}
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, 0);
				A_WeaponOffset(0, 0, WOF_KEEPY);
			}
			Goto Ready;
		Stab:
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, -10);
				A_WeaponOffset(80, 0, WOF_KEEPY);
			}
			#### # 16
			{
				let plr = HDPlayerPawn(self);
				A_SetTics(int(clamp(tics / plr.strength, 5, 30)));
			}
		LetGo:
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, -5);
				A_WeaponOffset(50, 0, WOF_KEEPY);
			}
			#### # 1
			{
				A_OverlayRotate(PSP_WEAPON, 0);
				A_WeaponOffset(25, 0, WOF_KEEPY);
			}
			#### # 0 A_WeaponBusy(false);
			Goto Ready;
			
		AltFire:
			#### # 0 A_JumpIf(PressingZoom(), 'Sudoku');
			#### # 0 A_Assassinate();
			Goto Fire;
		Sudoku:
			#### # 1;
			#### # 0
			{
				if (!CheckInventory('WornRadsuit', 0))
				{
					if (pitch < 55)
					{
						A_SetPitch(pitch + 8, SPF_INTERPOLATE);
						A_Refire('AltFire');
						return;
					}
					else
					{
						SetWeaponState('Ouchie');
						return;
					}
				}
			}
			Goto Nope;
		Ouchie:
			#### # 0 A_WeaponBusy(true);
			#### ### 1
			{
				A_WeaponOffset(0, 20, WOF_ADD);
				A_OverlayRotate(PSP_WEAPON, -30, WOF_ADD);
			}
			TNT1 A 5;
			#### # 0
			{
				invoker.Bloodied = true;
				A_CheckKnifeFrame();
				let plr = HDPlayerPawn(self);
				A_SetBlend("7a 3a 18", 0.2, 4);
				A_MuzzleClimb(0, frandom(1.0, 1.5));
				A_StartSound("Executioner/Stabbity", CHAN_WEAPON);
				A_StartSound("Executioner/Stabbity", CHAN_WEAPON, CHANF_OVERLAP);
				A_StartSound(plr.medsound, CHAN_VOICE);

				int toInflict = int(random(2, random(4, (!random(0, 2) ? 15 : 8))));
				if (plr.CountInv('HDBlues') > 30)
				{
					toInflict *= 6;
				}
				plr.woundcount += toInflict;
			}
		Schlorp:
			#### # 20;
			#### # 0
			{
				bool fullyFed = invoker.WeaponStatus[EXProp_Blood] > MaxBlood - 100;
				if (fullyFed && !random(0, 2) && invoker.TotalSchlorped > 500)
				{
					A_StartSound("Executioner/Chant", 20, CHANF_LOCAL, 0.85, pitch: frandom(1.0, 1.05));
					invoker.ChantTicker = 0;
				}
				if (!PressingFire() || fullyFed || HDPlayerPawn(self).bloodloss > 2000)
				{
					SetWeaponState('EndSchlorp');
				}
			}
			#### # 0
			{
				let plr = HDPlayerPawn(self);
				int toFeed = random(80, 120);
				invoker.WeaponStatus[EXProp_Blood] = min(MaxBlood, invoker.WeaponStatus[EXProp_Blood] + toFeed * 3);
				invoker.TotalSchlorped += toFeed;
				if (invoker.TotalSchlorped > 150)
				{
					A_GiveInventory("ExecutionerHealing", 80);
					let healing = ExecutionerHealing(FindInventory('ExecutionerHealing'));
					healing.Level = invoker.WeaponStatus[EXProp_Level];
				}
				plr.bloodloss += toFeed * (plr.CountInv('HDBlues') > 30 ? 8 : 1);
				plr.stunned = max(105, plr.stunned);
				A_StartSound("Executioner/Schlorp", CHAN_WEAPON, pitch: frandom(0.9, 1.2));
				invoker.Bloodied = true;
			}
			Loop;
		EndSchlorp:
			TNT1 A 15;
			EXEC # 0
			{
				A_CheckKnifeFrame();
				A_OverlayRotate(PSP_WEAPON, 0);
			}
			#### ### 1
			{
				A_WeaponOffset(0, -20, WOF_ADD);
			}
			#### ## 1
			{
				A_WeaponBusy(false);
				A_RotateToNormal();
			}
			Goto Nope;
	}
}

class ExecutionerHealing : HDDrug
{
	override void DoEffect()
	{
		Super.DoEffect();
		let plr = HDPlayerPawn(owner);
		if (plr)
		{
			plr.beatmax = min(plr.beatmax, 10);
			plr.bloodpressure = max(plr.bloodpressure, 50);
		}
	}

	override void OnHeartbeat(HDPlayerPawn hdp)
	{
		hdp.GiveBody(5 + 5 * Level);
		hdp.stunned = max(0, hdp.stunned - (20 + 10 * Level));
		Amount--;
	}

	int Level;
}

class ExecutionerPassiveSpeed : PowerSpeed
{
	override void DoEffect()
	{
		Speed = default.Speed + 0.25 * Level;
		Super.DoEffect();
	}

	int Level;

	Default
	{
		Speed 1.25;
		Powerup.Duration 0xFFFFFF;
	}
}

class ExecutionerPassiveInvisibility : PowerInvisibility 
{
	override void EndEffect()
	{
		Super.EndEffect();
		if (owner != NULL)
		{
			owner.bShadow = false;
			owner.bGhost = false;
			owner.bCantSeek = false;
			owner.A_SetRenderStyle(1, STYLE_Normal);
		}
	}
	Default
	{
		Powerup.Duration 0xFFFFFF;
		Powerup.Mode "Cumulative";
	}
}

class ExecutionerPuffBase : Actor abstract
{
	Default
	{
		+NOINTERACTION
		+ALLOWTHRUFLAGS
		+MTHRUSPECIES
		+PUFFGETSOWNER
		+NOEXTREMEDEATH
		DamageType "Melee";
		AttackSound "Executioner/WallImpact";
	}
}

class ExecutionerPuffSmall : ExecutionerPuffBase
{
	Default
	{
		Decal "ExecutionerSlashSmall";
	}
}

class ExecutionerPuffBig : ExecutionerPuffBase
{
	Default
	{
		Decal "ExecutionerSlashBig";
	}
}

class ExecutionerTrailParticleSpawner : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOINTERACTION
	}

	States
	{
		Spawn:
			TNT1 A 1 NoDelay
			{
				A_SpawnParticle(0xFF0000, SPF_RELATIVE | SPF_FULLBRIGHT, random(40, 105), frandom(2.0, 5.0), 0, 0, random(-10, 10), random(-20, 20), frandom(-0.1, 0.1), frandom(-0.5, 0.5), frandom(-0.5, 0.5), 0, frandom(-0.01, 0.01), frandom(-0.01, 0.01));
			}
			Stop;
	}
}